name: Infrastruture
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
    - 'infrastructure/**'
  pull_request:
    paths:
    - 'infrastructure/**'
    
jobs:
  deploy: # Job identifier; can be used to reference this job
    name: Deploy # Display name for the job
    runs-on: ubuntu-latest # We want this job to execute on an Ubuntu Linux machine

    steps: # Each action that our pipeline takes will be defined as a step
    - name: Checkout # Our first step is to checkout our code!
      uses: actions/checkout@v2
    
    - name: Setup Terraform # Name of the step
      uses: hashicorp/setup-terraform@v1 # Name of the Action to use
      with: # Parameters for the Action
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Format
      id: fmt
      working-directory: ./infrastructure
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      working-directory: ./infrastructure
      run: terraform init

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      working-directory: ./infrastructure
      rub: terraform plan -no-color
      continue-on-error: true
    
    - uses: actiions/github-script@0.9.0
      if: githab.event_name == 'pull_request'
      env:
        PLAN:  "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ screts.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization  ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details>
          <summary>Show Plan</summary>
          \`\`\`
          ${process.env.PLAN}
          \`\`\`
          </details>
          
          **Pusher: \`@${{ github.actor }}\`, Action: \`${{ github.event_name }}\`**`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })          

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terrform Apply
      working-directory: ./infrastruture
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve





